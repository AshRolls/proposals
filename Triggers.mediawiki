<pre>
  NEP: <to be assigned>
  Title: Triggers for NeoContract
  Author: Erik Zhang <erik@neo.org>
  Type: Standard
  Status: Draft
  Created: 2017-10-16
</pre>

==Abstract==

Trigger is a mechanism for triggering execution for smart contracts. This NEP defines four different kinds of triggers, they are <code>Verification</code>, <code>VerificationR</code>, <code>Application</code> and <code>ApplicationR</code>.

==Motivation==

A blockchain that provides smart contract system should provide multiple triggers for the smart contracts running on it, makes them to function in different contexts.

==Rationale==

Currently, we have two kinds of triggers in NeoContract: <code>Verification</code> and <code>Application</code>. These two triggers make smart contracts able to verify the transactions and modify the states of the blockchain.

But there is no way for smart contracts to refuse a transfer, or to modify the states of the blockchain while accepting a transfer. We need two new triggers to do it: <code>VerificationR</code> and <code>ApplicationR</code>.

==Specification==

We define 4 kinds of triggers: <code>Verification</code>, <code>VerificationR</code>, <code>Application</code> and <code>ApplicationR</code>.

===Verification===

The <code>Verification</code> trigger indicates that the contract is being invoked as a verification function. The verification function can accept multiple parameters, and should return a boolean value that indicates the validity of the transaction or block.

The verification function should have the following entry point:

<code>
public bool Verify(...)
</code>

The verification function can be invoked by setting the <code>Witness</code> field of transaction or block.

===VerificationR===

The <code>VerificationR</code> trigger indicates that the contract is being invoked as a verification function because it is specified as a target of an output of the transaction. The verification function accepts no parameter, and should return a boolean value that indicates the validity of the transaction.

The verification function should have the following entry point:

<code>
public bool Verify()
</code>

The verification function will be invoked automatically when a contract is receiving assets from a transfer.

===Application===

The <code>Application</code> trigger indicates that the contract is being invoked as an application function. The application function can accept multiple parameters, change the states of the blockchain, and return any type of value.

The application function can have any form of entry point, but we recommend that all application functions should have the following entry point:

<code>
public byte[] Main(string operation, params object[] args)
</code>

The application function can be invoked by creating an <code>InvocationTransaction</code>.

===ApplicationR===

The <code>ApplicationR</code> trigger indicates that the contract is being invoked as an application function because it is specified as a target of an output of the transaction. The application function accepts no parameter, change the states of the blockchain, and return any type of value.

The application function should have the following entry point:

<code>
public byte[] Main()
</code>

The application function will be invoked automatically when a contract is receiving assets from a transfer.

==Backwards Compatibility==

==Implementation==
