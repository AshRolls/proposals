<pre>
  NEP: <to be assigned>
  Title: NeoContract ABI
  Author: Erik Zhang <erik@neo.org>
  Type: Standard
  Status: Draft
  Created: 2017-9-13
</pre>

==Abstract==

An application binary interface (ABI) is the interface between two program modules, one of which is often a library and/or operating system and the other one is usually an application created by a regular programmer.

This NEP describes the ABI standards for NEO smart contracts.

==Motivation==

NEO smart contract system is designed to be mutually invocable between contracts. To achieve this, we need a mechanism for exposing the interface of smart contracts. With NeoContract ABI, developers can easily create programs to invoke smart contracts or write clients that automatically access contract functionalities.

==Rationale==

We assume the Application Binary Interface (ABI) is strongly typed, known at compilation time and static. No introspection mechanism will be provided. We assert that all contracts will have the interface definitions of any contracts they call available at compile-time.

This specification does not address contracts whose interface is dynamic or otherwise known only at run-time. Should these cases become important they can be adequately handled as facilities built within the NEO ecosystem.

==Specification==

===Contract===

The NeoContract ABI is defined by JSON format, which has the following basic structure, where some of the top-level objects can have any number of child objects:

<pre>
{
  "hash": "0x562851057d8afbc08fabc8c438d7cc771aef2195",
  "entrypoint": "main",
  "functions": [],
  "events": []
}
</pre>

<code>hash</code> is the script hash of the contract. It is encoded as a hexadecimal string in big-endian.

<code>entrypoint</code> indicates that which is the entry point of the contract in <code>functions</code>.

<code>functions</code> is an array of Function object which describes the details of each function in the contract.

<code>events</code> is an array of Event object which describes the details of each event in the contract.

===Function===

Function object has the following structure:

<pre>
{
  "name": "transfer",
  "paramaters": [],
  "returntype": "Boolean"
}
</pre>

<code>name</code> is the name of the function, which can be any valid identifier.

<code>paramaters</code> is an array of Paramater object which describes the details of each paramater in the function.

<code>returntype</code> indicates the return type of the function. It can be one of the following values: <code>Signature</code>, <code>Boolean</code>, <code>Integer</code>, <code>Hash160</code>, <code>Hash256</code>, <code>ByteArray</code>, <code>PublicKey</code>, <code>String</code>, <code>Array</code>, <code>InteropInterface</code>, <code>Void</code>.

===Event===

Event object has the following structure:

<pre>
{
  "name": "refund",
  "paramaters": []
}
</pre>

<code>name</code> is the name of the event, which can be any valid identifier.

<code>paramaters</code> is an array of Paramater object which describes the details of each paramater in the event.

===Paramater===

Paramater object has the following structure:

<pre>
{
  "name": "from",
  "type": "Hash160"
}
</pre>

<code>name</code> is the name of the paramater, which can be any valid identifier.

<code>type</code> indicates the type of the paramater. It can be one of the following values: <code>Signature</code>, <code>Boolean</code>, <code>Integer</code>, <code>Hash160</code>, <code>Hash256</code>, <code>ByteArray</code>, <code>PublicKey</code>, <code>String</code>, <code>Array</code>, <code>InteropInterface</code>.

===ParamaterType===

ParamaterType enum has the following values:

{|
!name
!description
|-
| Signature
| A signature of transaction or block which is generated by user.
|-
| Boolean
| A boolean value can be either <code>true</code> or <code>false</code>.
|-
| Integer
| An arbitrarily large integer whose value in theory has no upper or lower bounds.
|-
| Hash160
| A 160-bits integer.
|-
| Hash256
| A 256-bits integer.
|-
| ByteArray
| A byte array.
|-
| PublicKey
| An ECC public key which is encoded with compressed mode.
|-
| String
| A string which is encoded in UTF-8.
|-
| Array
| An array of objects.
|-
| InteropInterface
| An interface which is returned by interop services.
|-
| Void
| Void means that the function has no return value. This value cannot be the type of a parameter.
|}
